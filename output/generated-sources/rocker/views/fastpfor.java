package views;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import myapp.models.Probe;;
// import @ [2:1]
import java.util.List;;

/*
 * Auto generated code to render template views/fastpfor.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
public class fastpfor extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.HTML;
    static public final String TEMPLATE_NAME = "fastpfor.rocker.html";
    static public final String TEMPLATE_PACKAGE_NAME = "views";
    static public final String HEADER_HASH = "1398646068";
    static public final long MODIFIED_AT = 1494324040000L;
    static public final String[] ARGUMENT_NAMES = { "probes" };

    // argument @ [4:2]
    private List<Probe> probes;

    public fastpfor probes(List<Probe> probes) {
        this.probes = probes;
        return this;
    }

    public List<Probe> probes() {
        return this.probes;
    }

    static public fastpfor template(List<Probe> probes) {
        return new fastpfor()
            .probes(probes);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        //     <ul class=\"list-group\">\n
        static private final byte[] PLAIN_TEXT_0_0;
        //         <li class=\"list-group-item\">\n            Sex: 
        static private final byte[] PLAIN_TEXT_1_0;
        //  | Age: 
        static private final byte[] PLAIN_TEXT_2_0;
        //  | X: 
        static private final byte[] PLAIN_TEXT_3_0;
        //  | Y: 
        static private final byte[] PLAIN_TEXT_4_0;
        //  | Lat: 
        static private final byte[] PLAIN_TEXT_5_0;
        //  | Lng: 
        static private final byte[] PLAIN_TEXT_6_0;
        //  | Associated: 
        static private final byte[] PLAIN_TEXT_7_0;
        // \n        </li>\n
        static private final byte[] PLAIN_TEXT_8_0;
        //     </ul>\n
        static private final byte[] PLAIN_TEXT_9_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(fastpfor.class.getClassLoader(), fastpfor.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
        }

        // argument @ [4:2]
        protected final List<Probe> probes;

        public Template(fastpfor model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.probes = model.probes();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // ValueClosureBegin @ [6:1]
            __internal.aboutToExecutePosInTemplate(6, 1);
            __internal.renderValue(views.common.main.template("Home").__body(() -> {
                // PlainText @ [6:41]
                __internal.aboutToExecutePosInTemplate(6, 41);
                __internal.writeValue(PLAIN_TEXT_0_0);
                // ForBlockBegin @ [8:9]
                __internal.aboutToExecutePosInTemplate(8, 9);
                try {
                    final com.fizzed.rocker.runtime.CollectionForIterator<Probe> __forIterator0 = new com.fizzed.rocker.runtime.CollectionForIterator<Probe>(probes);
                    while (__forIterator0.hasNext()) {
                        final Probe p = __forIterator0.next();
                        try {
                            // PlainText @ [8:34]
                            __internal.aboutToExecutePosInTemplate(8, 34);
                            __internal.writeValue(PLAIN_TEXT_1_0);
                            // ValueExpression @ [10:18]
                            __internal.aboutToExecutePosInTemplate(10, 18);
                            __internal.renderValue(p.sex, false);
                            // PlainText @ [10:24]
                            __internal.aboutToExecutePosInTemplate(10, 24);
                            __internal.writeValue(PLAIN_TEXT_2_0);
                            // ValueExpression @ [10:32]
                            __internal.aboutToExecutePosInTemplate(10, 32);
                            __internal.renderValue(p.age, false);
                            // PlainText @ [10:38]
                            __internal.aboutToExecutePosInTemplate(10, 38);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // ValueExpression @ [10:44]
                            __internal.aboutToExecutePosInTemplate(10, 44);
                            __internal.renderValue(p.x, false);
                            // PlainText @ [10:48]
                            __internal.aboutToExecutePosInTemplate(10, 48);
                            __internal.writeValue(PLAIN_TEXT_4_0);
                            // ValueExpression @ [10:54]
                            __internal.aboutToExecutePosInTemplate(10, 54);
                            __internal.renderValue(p.y, false);
                            // PlainText @ [10:58]
                            __internal.aboutToExecutePosInTemplate(10, 58);
                            __internal.writeValue(PLAIN_TEXT_5_0);
                            // ValueExpression @ [10:66]
                            __internal.aboutToExecutePosInTemplate(10, 66);
                            __internal.renderValue(p.lat, false);
                            // PlainText @ [10:72]
                            __internal.aboutToExecutePosInTemplate(10, 72);
                            __internal.writeValue(PLAIN_TEXT_6_0);
                            // ValueExpression @ [10:80]
                            __internal.aboutToExecutePosInTemplate(10, 80);
                            __internal.renderValue(p.lng, false);
                            // PlainText @ [10:86]
                            __internal.aboutToExecutePosInTemplate(10, 86);
                            __internal.writeValue(PLAIN_TEXT_7_0);
                            // ValueExpression @ [10:101]
                            __internal.aboutToExecutePosInTemplate(10, 101);
                            __internal.renderValue(p.associated, false);
                            // PlainText @ [10:114]
                            __internal.aboutToExecutePosInTemplate(10, 114);
                            __internal.writeValue(PLAIN_TEXT_8_0);
                            // ForBlockEnd @ [8:9]
                            __internal.aboutToExecutePosInTemplate(8, 9);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [8:9]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [12:10]
                __internal.aboutToExecutePosInTemplate(12, 10);
                __internal.writeValue(PLAIN_TEXT_9_0);
                // ValueClosureEnd @ [6:1]
                __internal.aboutToExecutePosInTemplate(6, 1);
            }), false); // value closure end @ [6:1]
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "    <ul class=\"list-group\">\n";
        static private final String PLAIN_TEXT_1_0 = "        <li class=\"list-group-item\">\n            Sex: ";
        static private final String PLAIN_TEXT_2_0 = " | Age: ";
        static private final String PLAIN_TEXT_3_0 = " | X: ";
        static private final String PLAIN_TEXT_4_0 = " | Y: ";
        static private final String PLAIN_TEXT_5_0 = " | Lat: ";
        static private final String PLAIN_TEXT_6_0 = " | Lng: ";
        static private final String PLAIN_TEXT_7_0 = " | Associated: ";
        static private final String PLAIN_TEXT_8_0 = "\n        </li>\n";
        static private final String PLAIN_TEXT_9_0 = "    </ul>\n";

    }

}
