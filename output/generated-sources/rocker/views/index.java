package views;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import static java.lang.System.currentTimeMillis;;

/*
 * Auto generated code to render template views/index.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
public class index extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public final com.fizzed.rocker.ContentType CONTENT_TYPE = com.fizzed.rocker.ContentType.HTML;
    static public final String TEMPLATE_NAME = "index.rocker.html";
    static public final String TEMPLATE_PACKAGE_NAME = "views";
    static public final String HEADER_HASH = "113817735";
    static public final long MODIFIED_AT = 1494386423000L;
    static public final String[] ARGUMENT_NAMES = { "s" };

    // argument @ [3:2]
    private String s;

    public index s(String s) {
        this.s = s;
        return this;
    }

    public String s() {
        return this.s;
    }

    static public index template(String s) {
        return new index()
            .s(s);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        //  
        static private final byte[] PLAIN_TEXT_0_0;
        // \n
        static private final byte[] PLAIN_TEXT_1_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(index.class.getClassLoader(), index.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
        }

        // argument @ [3:2]
        protected final String s;

        public Template(index model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.s = model.s();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // ValueClosureBegin @ [5:1]
            __internal.aboutToExecutePosInTemplate(5, 1);
            __internal.renderValue(views.common.main.template("Home").__body(() -> {
                // ValueExpression @ [6:5]
                __internal.aboutToExecutePosInTemplate(6, 5);
                __internal.renderValue(s, false);
                // PlainText @ [6:7]
                __internal.aboutToExecutePosInTemplate(6, 7);
                __internal.writeValue(PLAIN_TEXT_0_0);
                // ValueExpression @ [6:8]
                __internal.aboutToExecutePosInTemplate(6, 8);
                __internal.renderValue(currentTimeMillis(), false);
                // PlainText @ [6:28]
                __internal.aboutToExecutePosInTemplate(6, 28);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ValueClosureEnd @ [5:1]
                __internal.aboutToExecutePosInTemplate(5, 1);
            }), false); // value closure end @ [5:1]
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = " ";
        static private final String PLAIN_TEXT_1_0 = "\n";

    }

}
